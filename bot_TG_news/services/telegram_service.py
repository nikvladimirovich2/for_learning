import logging
import time
from typing import Optional, Dict, List
from telegram import Bot, ParseMode
from telegram.error import TelegramError, RetryAfter
from config.settings import (
    TELEGRAM_TOKEN, TELEGRAM_PARSE_MODE, 
    TELEGRAM_DISABLE_WEB_PAGE_PREVIEW, MAX_CONTENT_LENGTH
)

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self, token: str = TELEGRAM_TOKEN):
        self.bot = Bot(token=token)
        self.parse_mode = ParseMode.MARKDOWN
        self.disable_web_page_preview = TELEGRAM_DISABLE_WEB_PAGE_PREVIEW
    
    def format_news_message(self, title: str, content: str, link: str, 
                           date: str = None, category: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_emojis = {
            'drustvo': 'üèõÔ∏è',
            'ekonomija': 'üí∞',
            'zdravstvo': 'üè•',
            'ekologija': 'üå±',
            'politika': 'üó≥Ô∏è',
            'hronika': 'üì∞',
            'servisne-informacije': 'üîß',
            'kultura': 'üé≠',
            'sport': '‚öΩ',
            'najave-dogadjaja': 'üìÖ',
            'general': 'üì∞'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_emoji = category_emojis.get(category.lower(), 'üì∞')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        message_parts.append(f"{category_emoji} **{title}**")
        
        # –î–∞—Ç–∞
        if date:
            message_parts.append(f"üìÖ {date}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if content:
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            truncated_content = content[:MAX_CONTENT_LENGTH]
            if len(content) > MAX_CONTENT_LENGTH:
                truncated_content += "..."
            message_parts.append(f"üìù {truncated_content}")
        
        # –°—Å—ã–ª–∫–∞
        message_parts.append(f"üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({link})")
        
        return "\n\n".join(message_parts)
    
    def send_news_message(self, chat_id: str, title: str, content: str, 
                         link: str, date: str = None, category: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é"""
        try:
            message = self.format_news_message(title, content, link, date, category)
            
            self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=self.parse_mode,
                disable_web_page_preview=self.disable_web_page_preview
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {title}")
            return True
            
        except RetryAfter as e:
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É: {e.retry_after} —Å–µ–∫")
            time.sleep(e.retry_after)
            return self.send_news_message(chat_id, title, content, link, date, category)
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def send_news_with_image(self, chat_id: str, title: str, content: str, 
                            link: str, image_url: str, date: str = None, 
                            category: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        try:
            message = self.format_news_message(title, content, link, date, category)
            
            self.bot.send_photo(
                chat_id=chat_id,
                photo=image_url,
                caption=message,
                parse_mode=self.parse_mode
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {title}")
            return True
            
        except RetryAfter as e:
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É: {e.retry_after} —Å–µ–∫")
            time.sleep(e.retry_after)
            return self.send_news_with_image(chat_id, title, content, link, image_url, date, category)
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return self.send_news_message(chat_id, title, content, link, date, category)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return self.send_news_message(chat_id, title, content, link, date, category)
    
    def send_news(self, chat_id: str, news_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            title = news_data.get('title', '')
            content = news_data.get('content', '')
            link = news_data.get('link', '')
            date = news_data.get('date', '')
            category = news_data.get('category', '')
            image_url = news_data.get('image_url', '')
            
            if image_url:
                return self.send_news_with_image(
                    chat_id, title, content, link, image_url, date, category
                )
            else:
                return self.send_news_message(
                    chat_id, title, content, link, date, category
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return False
    
    def send_daily_digest(self, chat_id: str, digest_data: List[tuple]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if not digest_data:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                return True
            
            digest = "üì∞ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n"
            
            for category, count, titles in digest_data:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_emojis = {
                    'drustvo': 'üèõÔ∏è', 'ekonomija': 'üí∞', 'zdravstvo': 'üè•',
                    'ekologija': 'üå±', 'politika': 'üó≥Ô∏è', 'hronika': 'üì∞',
                    'servisne-informacije': 'üîß', 'kultura': 'üé≠', 'sport': '‚öΩ',
                    'najave-dogadjaja': 'üìÖ', 'general': 'üì∞'
                }
                
                emoji = category_emojis.get(category.lower(), 'üì∞')
                digest += f"{emoji} **{category.title()}** ({count}):\n"
                
                # –û–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
                if len(titles) > 150:
                    titles = titles[:150] + "..."
                digest += f"{titles}\n\n"
            
            self.bot.send_message(
                chat_id=chat_id,
                text=digest,
                parse_mode=self.parse_mode
            )
            
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except RetryAfter as e:
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É: {e.retry_after} —Å–µ–∫")
            time.sleep(e.retry_after)
            return self.send_daily_digest(chat_id, digest_data)
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    def send_statistics(self, chat_id: str, stats: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞**

üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('sent_news', 0)}
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {stats.get('unsent_news', 0)}
üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats.get('days_active', 0)}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å: {stats.get('last_news', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
üì§ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {stats.get('last_sent', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
            """.strip()
            
            self.bot.send_message(
                chat_id=chat_id,
                text=stats_message,
                parse_mode=self.parse_mode
            )
            
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return True
            
        except RetryAfter as e:
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É: {e.retry_after} —Å–µ–∫")
            time.sleep(e.retry_after)
            return self.send_statistics(chat_id, stats)
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def send_error_notification(self, chat_id: str, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞**\n\n{error_message}"
            
            self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=self.parse_mode
            )
            
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API"""
        try:
            bot_info = self.bot.get_me()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ: {bot_info.first_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
