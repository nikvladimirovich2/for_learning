import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, DEFAULT_LANGUAGE, ERROR_MESSAGES
from grok_api import GrokAPIClient
from channel_manager import ChannelManager
from comment_handler import CommentHandler
from article_generator import ArticleGenerator

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GrokAdminBot:
    """Main Telegram bot class with Grok AI integration"""
    
    def __init__(self, token: str, language: str = DEFAULT_LANGUAGE):
        self.token = token
        self.language = language
        self.bot = Bot(token=token)
        
        # Initialize components
        self.grok_client = GrokAPIClient(language=language)
        self.channel_manager = ChannelManager(self.bot, language=language)
        self.comment_handler = CommentHandler(self.bot, self.grok_client, language=language)
        self.article_generator = ArticleGenerator(self.bot, self.grok_client, self.channel_manager, language=language)
        
        # Initialize application
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """Setup bot command and message handlers"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("generate_article", self.generate_article_command))
        self.application.add_handler(CommandHandler("generate_trending", self.generate_trending_command))
        self.application.add_handler(CommandHandler("post_article", self.post_article_command))
        self.application.add_handler(CommandHandler("channel_info", self.channel_info_command))
        self.application.add_handler(CommandHandler("comment_stats", self.comment_stats_command))
        self.application.add_handler(CommandHandler("article_stats", self.article_stats_command))
        self.application.add_handler(CommandHandler("schedule_articles", self.schedule_articles_command))
        self.application.add_handler(CommandHandler("language", self.language_command))
        self.application.add_handler(CommandHandler("test_grok", self.test_grok_command))
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Callback query handlers
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        try:
            user = update.effective_user
            welcome_message = self.get_welcome_message(user.first_name)
            
            keyboard = [
                [InlineKeyboardButton("üì∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é", callback_data="generate_article")],
                [InlineKeyboardButton("üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data="trending_topics")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        try:
            help_text = self.get_help_text()
            await update.message.reply_text(help_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in help command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        try:
            # Check Grok AI connection
            grok_status = self.grok_client.test_connection()
            
            # Get basic statistics
            comment_stats = self.comment_handler.get_comment_analytics()
            article_stats = self.article_generator.get_article_statistics()
            
            status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
            status_text += f"üîó <b>Grok AI:</b> {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if grok_status else '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}\n"
            status_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {comment_stats.get('total_comments_processed', 0)}\n"
            status_text += f"üì∞ <b>–°—Ç–∞—Ç–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {article_stats.get('total_generated', 0)}\n"
            status_text += f"üåê <b>–Ø–∑—ã–∫:</b> {self.language.upper()}\n"
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in status command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def generate_article_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /generate_article command"""
        try:
            if not context.args:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Ç–∞—Ç—å–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate_article –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
                return
            
            topic = " ".join(context.args)
            await update.message.reply_text(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {topic}")
            
            # Generate article
            article_id = await self.article_generator.generate_article_on_topic(topic, self.language)
            
            if article_id:
                article_data = self.article_generator.get_article_by_id(article_id)
                content = article_data["content"]
                
                # Truncate if too long
                if len(content) > 4000:
                    content = content[:4000] + "..."
                
                keyboard = [
                    [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", callback_data=f"post_{article_id}")],
                    [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{article_id}")],
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{article_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(f"üì∞ <b>–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n{content}", 
                                              reply_markup=reply_markup, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"Error in generate_article command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def generate_trending_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /generate_trending command"""
        try:
            await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—É—é —Ç–µ–º—É...")
            
            article_id = await self.article_generator.generate_trending_article(self.language)
            
            if article_id:
                article_data = self.article_generator.get_article_by_id(article_id)
                content = article_data["content"]
                topic = article_data["topic"]
                
                # Truncate if too long
                if len(content) > 4000:
                    content = content[:4000] + "..."
                
                keyboard = [
                    [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", callback_data=f"post_{article_id}")],
                    [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{article_id}")],
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{article_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(f"üî• <b>–¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: {topic}</b>\n\n{content}", 
                                              reply_markup=reply_markup, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"Error in generate_trending command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def post_article_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /post_article command"""
        try:
            if not context.args:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å—Ç–∞—Ç—å–∏ –∏ ID –∫–∞–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /post_article article_123 channel_456")
                return
            
            if len(context.args) < 2:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Å—Ç–∞—Ç—å–∏ –∏ ID –∫–∞–Ω–∞–ª–∞")
                return
            
            article_id = context.args[0]
            channel_id = context.args[1]
            
            await update.message.reply_text(f"üì§ –ü—É–±–ª–∏–∫—É—é —Å—Ç–∞—Ç—å—é {article_id} –≤ –∫–∞–Ω–∞–ª {channel_id}...")
            
            success = await self.article_generator.post_article_to_channel(article_id, channel_id)
            
            if success:
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏")
                
        except Exception as e:
            logger.error(f"Error in post_article command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def channel_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /channel_info command"""
        try:
            if not context.args:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /channel_info @channel_name")
                return
            
            channel_id = context.args[0]
            channel_info = await self.channel_manager.get_channel_info(channel_id)
            
            if channel_info:
                info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
                info_text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_info['title']}\n"
                info_text += f"üîó <b>Username:</b> @{channel_info['username']}\n"
                info_text += f"üë• <b>–¢–∏–ø:</b> {channel_info['type']}\n"
                if channel_info['member_count']:
                    info_text += f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {channel_info['member_count']}\n"
                
                await update.message.reply_text(info_text, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
                
        except Exception as e:
            logger.error(f"Error in channel_info command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def comment_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /comment_stats command"""
        try:
            stats = self.comment_handler.get_comment_analytics()
            
            stats_text = f"üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>\n\n"
            stats_text += f"üìä <b>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {stats.get('total_comments_processed', 0)}\n"
            stats_text += f"üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats.get('unique_users', 0)}\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in comment_stats command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def article_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /article_stats command"""
        try:
            stats = self.article_generator.get_article_statistics()
            
            stats_text = f"üì∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π:</b>\n\n"
            stats_text += f"üìä <b>–í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {stats.get('total_generated', 0)}\n"
            stats_text += f"üì§ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {stats.get('total_posted', 0)}\n"
            stats_text += f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {stats.get('posting_rate', '0%')}\n"
            stats_text += f"‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:</b> {stats.get('active_schedules', 0)}\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in article_stats command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def schedule_articles_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /schedule_articles command"""
        try:
            if not context.args:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: /schedule_articles 24")
                return
            
            try:
                interval = int(context.args[0])
                if interval < 1 or interval > 168:  # Max 1 week
                    await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤")
                    return
            except ValueError:
                await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            await update.message.reply_text(f"‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–µ–π –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤...")
            
            success = await self.article_generator.schedule_article_generation(interval)
            
            if success:
                await update.message.reply_text(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –°—Ç–∞—Ç—å–∏ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"Error in schedule_articles command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /language command"""
        try:
            if not context.args:
                current_lang = "–†—É—Å—Å–∫–∏–π" if self.language == "ru" else "English"
                await update.message.reply_text(f"üåê <b>–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:</b> {current_lang}\n\n"
                                              f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru, en\n"
                                              f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /language ru", parse_mode='HTML')
                return
            
            new_language = context.args[0].lower()
            if new_language not in ["ru", "en"]:
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∏: ru, en")
                return
            
            self.language = new_language
            self.grok_client.language = new_language
            self.channel_manager.language = new_language
            self.comment_handler.language = new_language
            self.article_generator.language = new_language
            
            lang_name = "–†—É—Å—Å–∫–∏–π" if new_language == "ru" else "English"
            await update.message.reply_text(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang_name}")
            
        except Exception as e:
            logger.error(f"Error in language command: {e}")
            await update.message.reply_text(self.get_error_message("api_error"))
    
    async def test_grok_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /test_grok command"""
        try:
            await update.message.reply_text("üîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Grok AI...")
            
            success = self.grok_client.test_connection()
            
            if success:
                await update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Grok AI —É—Å–ø–µ—à–Ω–æ!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grok AI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
                
        except Exception as e:
            logger.error(f"Error in test_grok command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming messages"""
        try:
            # Process comments if applicable
            await self.comment_handler.process_comment(update, context)
            
        except Exception as e:
            logger.error(f"Error handling message: {e}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            
            if data == "generate_article":
                await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate_article <—Ç–µ–º–∞>")
                
            elif data == "trending_topics":
                await query.edit_message_text("üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate_trending –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—É—é —Ç–µ–º—É")
                
            elif data == "statistics":
                await query.edit_message_text("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/comment_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n/article_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π")
                
            elif data == "settings":
                await query.edit_message_text("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/language - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
                
            elif data.startswith("post_"):
                article_id = data[5:]  # Remove "post_" prefix
                await query.edit_message_text(f"üì§ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ {article_id} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/post_article {article_id} <ID_–∫–∞–Ω–∞–ª–∞>")
                
            elif data.startswith("edit_"):
                article_id = data[5:]  # Remove "edit_" prefix
                await query.edit_message_text(f"‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ {article_id} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/edit_article {article_id} <–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç>")
                
            elif data.startswith("delete_"):
                article_id = data[7:]  # Remove "delete_" prefix
                await query.edit_message_text(f"üóëÔ∏è –°—Ç–∞—Ç—å—è {article_id} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
                
        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            except:
                pass
    
    def get_welcome_message(self, user_name: str) -> str:
        """Get localized welcome message"""
        if self.language == "ru":
            return f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Grok AI. –Ø –º–æ–≥—É:\n\n" \
                   f"üì∞ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã\n" \
                   f"üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
                   f"üìä –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏ Telegram\n\n" \
                   f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        else:
            return f"üëã Hello, {user_name}!\n\nI'm an admin bot with Grok AI integration. I can:\n\n" \
                   f"üì∞ Generate articles on trending topics\n" \
                   f"üí¨ Respond to user comments\n" \
                   f"üìä Manage Telegram channels\n\n" \
                   f"Use /help command for assistance."
    
    def get_help_text(self) -> str:
        """Get localized help text"""
        if self.language == "ru":
            return """ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

üì∞ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π:</b>
/generate_article <—Ç–µ–º–∞> - —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É
/generate_trending - —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—É—é —Ç–µ–º—É
/schedule_articles <—á–∞—Å—ã> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

üì§ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b>
/post_article <ID_—Å—Ç–∞—Ç—å–∏> <ID_–∫–∞–Ω–∞–ª–∞> - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/status - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/comment_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
/article_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π
/channel_info <ID_–∫–∞–Ω–∞–ª–∞> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/language <ru/en> - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/test_grok - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Grok AI

üí¨ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
        else:
            return """ü§ñ <b>Command Help:</b>

üì∞ <b>Article Generation:</b>
/generate_article <topic> - create article on specific topic
/generate_trending - create article on trending topic
/schedule_articles <hours> - set up regular generation

üì§ <b>Publishing:</b>
/post_article <article_id> <channel_id> - publish article

üìä <b>Statistics:</b>
/status - general bot status
/comment_stats - comment statistics
/article_stats - article statistics
/channel_info <channel_id> - channel information

‚öôÔ∏è <b>Settings:</b>
/language <ru/en> - change language
/test_grok - test Grok AI connection

üí¨ <b>Automatic Features:</b>
‚Ä¢ Responding to user comments
‚Ä¢ Content moderation
‚Ä¢ Channel management"""
    
    def get_error_message(self, error_type: str) -> str:
        """Get localized error message"""
        try:
            return ERROR_MESSAGES.get(self.language, ERROR_MESSAGES["en"]).get(error_type, "An error occurred")
        except:
            return "An error occurred"
    
    async def run(self):
        """Run the bot"""
        try:
            logger.info("Starting Grok Admin Bot...")
            
            # Test Grok AI connection
            if not self.grok_client.test_connection():
                logger.warning("Grok AI connection test failed. Bot will start but some features may not work.")
            
            # Start the bot
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("Bot started successfully!")
            
            # Keep the bot running
            await asyncio.Event().wait()
            
        except Exception as e:
            logger.error(f"Error running bot: {e}")
        finally:
            await self.application.stop()
            await self.application.shutdown()

async def main():
    """Main function"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå Error: TELEGRAM_BOT_TOKEN not set in environment variables")
        return
    
    bot = GrokAdminBot(TELEGRAM_BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
